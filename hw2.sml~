(* Dan Grossman, Coursera PL, HW2 Provided Code *)

(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2

(* put your solutions for problem 1 here *)
	     
fun all_except_option (str, []) = NONE
  | all_except_option (str, x :: xs) =
    case same_string(str, x) of
	true => SOME xs
      | false => case all_except_option(str, xs) of
		     NONE => NONE
		   | SOME y => SOME (x :: y)

fun get_substitutions1 ([], s) = []
  | get_substitutions1 (x :: xs, s) =
    case all_except_option(s, x) of
	SOME y => y @ get_substitutions1(xs, s)  
      | NONE => get_substitutions1(xs, s)

fun get_substitutions2 (strls, s) =
    let fun f ([], s, acc) = acc
	  | f (x :: xs, s, acc) =
	    case all_except_option(s, x) of
		SOME y => f(xs, s, y @ acc)
	      | NONE => f(xs, s, acc)
    in
	f(strls, s, [])
    end

fun similar_names (strls, {first, middle, last}) =
    let
	val substitutions = get_substitutions2(strls, first)
	fun aux ([], {first, middle, last}, acc) = acc
	  | aux (x :: xs, {first, middle, last}, acc) =  aux(xs, {first = first, middle = middle, last = last},{first = x, middle = middle, last = last} :: acc)
    in
	aux(substitutions, {first = first, middle = middle, last = last}, [{first = first, middle = middle, last = last}])
    end
					       
(* you may assume that Num is always usecd with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int 
type card = suit * rank

datatype color = Red | Black
datatype move = Discard of card | Draw 

exception IllegalMove

(* put your solutions for problem 2 here *)

fun card_color (card) =
    case card of
	(Clubs, _) => Black
     |  (Spades, _) => Black
     |  (Diamonds, _) => Red
     |  (Hearts, _) => Red
		      
fun card_value (card) =
    case card of
	(_, Num x) => x
      | (_, Ace) => 11
      | (_, King) => 10
      | (_, Queen) => 10
      | (_, ack) => 10

fun remove_card ([], c, e) = raise e
  | remove_card (x :: xs, c, e) =
    case x = c of
	false => x :: remove_card(xs, c, e)
      | true => xs
		    
fun all_same_color (lc) = 
    case lc of
	[] => true
      | _::[] => true
      | hd::(nk::rest) => (card_color(hd) = card_color(nk) andalso all_same_color(nk::rest))
    
